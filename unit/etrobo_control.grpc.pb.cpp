// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: etrobo_control.proto

#include "etrobo_control.pb.h"
#include "etrobo_control.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace etrobo_grpc {

static const char* EtRobo_method_names[] = {
  "/etrobo_grpc.EtRobo/Control",
};

std::unique_ptr< EtRobo::Stub> EtRobo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EtRobo::Stub> stub(new EtRobo::Stub(channel));
  return stub;
}

EtRobo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Control_(EtRobo_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EtRobo::Stub::Control(::grpc::ClientContext* context, const ::etrobo_grpc::ControlParameter& request, ::etrobo_grpc::ControlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Control_, context, request, response);
}

void EtRobo::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::etrobo_grpc::ControlParameter* request, ::etrobo_grpc::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, std::move(f));
}

void EtRobo::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::etrobo_grpc::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, std::move(f));
}

void EtRobo::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::etrobo_grpc::ControlParameter* request, ::etrobo_grpc::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, reactor);
}

void EtRobo::Stub::experimental_async::Control(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::etrobo_grpc::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Control_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::etrobo_grpc::ControlReply>* EtRobo::Stub::AsyncControlRaw(::grpc::ClientContext* context, const ::etrobo_grpc::ControlParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::etrobo_grpc::ControlReply>::Create(channel_.get(), cq, rpcmethod_Control_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::etrobo_grpc::ControlReply>* EtRobo::Stub::PrepareAsyncControlRaw(::grpc::ClientContext* context, const ::etrobo_grpc::ControlParameter& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::etrobo_grpc::ControlReply>::Create(channel_.get(), cq, rpcmethod_Control_, context, request, false);
}

EtRobo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EtRobo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EtRobo::Service, ::etrobo_grpc::ControlParameter, ::etrobo_grpc::ControlReply>(
          [](EtRobo::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::etrobo_grpc::ControlParameter* req,
             ::etrobo_grpc::ControlReply* resp) {
               return service->Control(ctx, req, resp);
             }, this)));
}

EtRobo::Service::~Service() {
}

::grpc::Status EtRobo::Service::Control(::grpc::ServerContext* context, const ::etrobo_grpc::ControlParameter* request, ::etrobo_grpc::ControlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace etrobo_grpc

