// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: etrobo_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_etrobo_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_etrobo_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_etrobo_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_etrobo_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_etrobo_5fcontrol_2eproto;
namespace etrobo_grpc {
class ControlParameter;
class ControlParameterDefaultTypeInternal;
extern ControlParameterDefaultTypeInternal _ControlParameter_default_instance_;
class ControlReply;
class ControlReplyDefaultTypeInternal;
extern ControlReplyDefaultTypeInternal _ControlReply_default_instance_;
}  // namespace etrobo_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::etrobo_grpc::ControlParameter* Arena::CreateMaybeMessage<::etrobo_grpc::ControlParameter>(Arena*);
template<> ::etrobo_grpc::ControlReply* Arena::CreateMaybeMessage<::etrobo_grpc::ControlReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace etrobo_grpc {

// ===================================================================

class ControlParameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etrobo_grpc.ControlParameter) */ {
 public:
  inline ControlParameter() : ControlParameter(nullptr) {};
  virtual ~ControlParameter();

  ControlParameter(const ControlParameter& from);
  ControlParameter(ControlParameter&& from) noexcept
    : ControlParameter() {
    *this = ::std::move(from);
  }

  inline ControlParameter& operator=(const ControlParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlParameter& operator=(ControlParameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlParameter* internal_default_instance() {
    return reinterpret_cast<const ControlParameter*>(
               &_ControlParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlParameter& a, ControlParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlParameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlParameter* New() const final {
    return CreateMaybeMessage<ControlParameter>(nullptr);
  }

  ControlParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlParameter& from);
  void MergeFrom(const ControlParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etrobo_grpc.ControlParameter";
  }
  protected:
  explicit ControlParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etrobo_5fcontrol_2eproto);
    return ::descriptor_table_etrobo_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kEdgeFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kSteerFieldNumber = 4,
    kThresholdFieldNumber = 5,
  };
  // int32 mode = 1;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mode() const;
  void _internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 edge = 2;
  void clear_edge();
  ::PROTOBUF_NAMESPACE_ID::int32 edge() const;
  void set_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_edge() const;
  void _internal_set_edge(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 steer = 4;
  void clear_steer();
  ::PROTOBUF_NAMESPACE_ID::int32 steer() const;
  void set_steer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_steer() const;
  void _internal_set_steer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint32 threshold = 5;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int32 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threshold() const;
  void _internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:etrobo_grpc.ControlParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 edge_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 steer_;
  ::PROTOBUF_NAMESPACE_ID::int32 threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etrobo_5fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ControlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:etrobo_grpc.ControlReply) */ {
 public:
  inline ControlReply() : ControlReply(nullptr) {};
  virtual ~ControlReply();

  ControlReply(const ControlReply& from);
  ControlReply(ControlReply&& from) noexcept
    : ControlReply() {
    *this = ::std::move(from);
  }

  inline ControlReply& operator=(const ControlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlReply& operator=(ControlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlReply* internal_default_instance() {
    return reinterpret_cast<const ControlReply*>(
               &_ControlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlReply& a, ControlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlReply* New() const final {
    return CreateMaybeMessage<ControlReply>(nullptr);
  }

  ControlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlReply& from);
  void MergeFrom(const ControlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "etrobo_grpc.ControlReply";
  }
  protected:
  explicit ControlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_etrobo_5fcontrol_2eproto);
    return ::descriptor_table_etrobo_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kParamFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .etrobo_grpc.ControlParameter param = 2;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::etrobo_grpc::ControlParameter& param() const;
  ::etrobo_grpc::ControlParameter* release_param();
  ::etrobo_grpc::ControlParameter* mutable_param();
  void set_allocated_param(::etrobo_grpc::ControlParameter* param);
  private:
  const ::etrobo_grpc::ControlParameter& _internal_param() const;
  ::etrobo_grpc::ControlParameter* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::etrobo_grpc::ControlParameter* param);
  ::etrobo_grpc::ControlParameter* unsafe_arena_release_param();

  // @@protoc_insertion_point(class_scope:etrobo_grpc.ControlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::etrobo_grpc::ControlParameter* param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_etrobo_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlParameter

// int32 mode = 1;
inline void ControlParameter::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::_internal_mode() const {
  return mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::mode() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlParameter.mode)
  return _internal_mode();
}
inline void ControlParameter::_internal_set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
}
inline void ControlParameter::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlParameter.mode)
}

// int32 edge = 2;
inline void ControlParameter::clear_edge() {
  edge_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::_internal_edge() const {
  return edge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::edge() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlParameter.edge)
  return _internal_edge();
}
inline void ControlParameter::_internal_set_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  edge_ = value;
}
inline void ControlParameter::set_edge(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_edge(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlParameter.edge)
}

// sint32 speed = 3;
inline void ControlParameter::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::speed() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlParameter.speed)
  return _internal_speed();
}
inline void ControlParameter::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void ControlParameter::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlParameter.speed)
}

// sint32 steer = 4;
inline void ControlParameter::clear_steer() {
  steer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::_internal_steer() const {
  return steer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::steer() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlParameter.steer)
  return _internal_steer();
}
inline void ControlParameter::_internal_set_steer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  steer_ = value;
}
inline void ControlParameter::set_steer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_steer(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlParameter.steer)
}

// sint32 threshold = 5;
inline void ControlParameter::clear_threshold() {
  threshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::_internal_threshold() const {
  return threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlParameter::threshold() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlParameter.threshold)
  return _internal_threshold();
}
inline void ControlParameter::_internal_set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threshold_ = value;
}
inline void ControlParameter::set_threshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlParameter.threshold)
}

// -------------------------------------------------------------------

// ControlReply

// string message = 1;
inline void ControlReply::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlReply::message() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlReply.message)
  return _internal_message();
}
inline void ControlReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:etrobo_grpc.ControlReply.message)
}
inline std::string* ControlReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:etrobo_grpc.ControlReply.message)
  return _internal_mutable_message();
}
inline const std::string& ControlReply::_internal_message() const {
  return message_.Get();
}
inline void ControlReply::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlReply::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:etrobo_grpc.ControlReply.message)
}
inline void ControlReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:etrobo_grpc.ControlReply.message)
}
inline void ControlReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:etrobo_grpc.ControlReply.message)
}
inline std::string* ControlReply::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlReply::release_message() {
  // @@protoc_insertion_point(field_release:etrobo_grpc.ControlReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:etrobo_grpc.ControlReply.message)
}
inline std::string* ControlReply::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:etrobo_grpc.ControlReply.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlReply::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:etrobo_grpc.ControlReply.message)
}

// .etrobo_grpc.ControlParameter param = 2;
inline bool ControlReply::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool ControlReply::has_param() const {
  return _internal_has_param();
}
inline void ControlReply::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::etrobo_grpc::ControlParameter& ControlReply::_internal_param() const {
  const ::etrobo_grpc::ControlParameter* p = param_;
  return p != nullptr ? *p : *reinterpret_cast<const ::etrobo_grpc::ControlParameter*>(
      &::etrobo_grpc::_ControlParameter_default_instance_);
}
inline const ::etrobo_grpc::ControlParameter& ControlReply::param() const {
  // @@protoc_insertion_point(field_get:etrobo_grpc.ControlReply.param)
  return _internal_param();
}
inline void ControlReply::unsafe_arena_set_allocated_param(
    ::etrobo_grpc::ControlParameter* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:etrobo_grpc.ControlReply.param)
}
inline ::etrobo_grpc::ControlParameter* ControlReply::release_param() {
  auto temp = unsafe_arena_release_param();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::etrobo_grpc::ControlParameter* ControlReply::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:etrobo_grpc.ControlReply.param)
  
  ::etrobo_grpc::ControlParameter* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::etrobo_grpc::ControlParameter* ControlReply::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::etrobo_grpc::ControlParameter>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::etrobo_grpc::ControlParameter* ControlReply::mutable_param() {
  // @@protoc_insertion_point(field_mutable:etrobo_grpc.ControlReply.param)
  return _internal_mutable_param();
}
inline void ControlReply::set_allocated_param(::etrobo_grpc::ControlParameter* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:etrobo_grpc.ControlReply.param)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace etrobo_grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_etrobo_5fcontrol_2eproto
